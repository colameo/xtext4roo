#summary Describes the nesessary steps to deploy your own Xtext DSL in Spring Roo.

= The DSL Bundle =

  * Create your Xtext project in Eclispe as usual with the Xtext wizard. Define your grammar, run the mwe 

workflow.
  * In the MANIFEST.mf, set all dependencies to optional. (otherwise there yould be required transitive dependencies to Equinox, which leads to bundle resolving errors in Apache Felix)
  * Add an optional require-bundle dependency  to xtext4roo-wrapper
  * The Require-Bundle section in the Manifest.MF of your Xtext language project should now look like this:
{{{
...
Require-Bundle: org.eclipse.xtext;resolution:=optional,
 org.eclipse.xtext.generator;resolution:=optional,
 org.apache.commons.logging;resolution:=optional,
 org.eclipse.emf.codegen.ecore;resolution:=optional,
 org.eclipse.emf.mwe.utils;resolution:=optional,
 org.eclipse.emf.mwe2.launch;resolution:=optional,
 com.ibm.icu;resolution:=optional,
 org.eclipse.xtext.xtend;resolution:=optional,
 org.eclipse.xtext.util;resolution:=optional,
 org.eclipse.emf.ecore;resolution:=optional,
 org.eclipse.emf.ecore.xmi;resolution:=optional,
 org.eclipse.emf.common;resolution:=optional,
 org.antlr.runtime;resolution:=optional,
 org.eclipse.xtext.common.types;resolution:=optional,
 de.saxsys.roo.xtext4roo-wrapper;resolution:=optional
...
}}}

  * copy the pom.xml from our example DSL to your Xtext language project and change the artifact id an name to match your project name

  * As a workaround for [https://issuetracker.springsource.com/browse/STS-1318] , do the following:
    * Copy PatchedXtextResourceSet.java from our example DSL to your project, in the same package as the grammar
    * Add the following method to the RuntimeModule class which is also located in the same package as the grammar:
{{{
public Class<? extends XtextResourceSet> bindXtextResourceSet() {
   return PatchedXtextResourceSet.class;
}
}}}

  * run mvn install (make sure to use Maven 3.0 or above) for your Xtext language project project

  * now you should have the jar for your DSL in target and in your local Maven repo


= The DSL-Roo-Integration Bundle =

Now you will create a bundle that embeds your DSL jar and adds a class for registration in Spring Roo, so that the DSL can be discovered by the XtextMetadataProvider from xtext4roo-wrapper bundle.

  * now create a new Maven project with a POM like in our de.saxsys.roo.xtext.example.somedsl.roo
  * you have to change the following in the POM:
    * artifact ID, project name
    * the dependency to de.saxsys.roo.xtext.example.somedsl must be changed to point to your DSL Maven artifact
    * in the configuration section of maven-bundle-plugin, the following line must be changed to point to your DSL package:
{{{
<_exportcontents>de.saxsys.roo.xtext.example.somedsl.*</_exportcontents>
}}}
    * also in the configuration section of maven-bundle-plugin, the following line must be changed to point to your DSL maven artifact:
{{{
<Embed-Dependency>de.saxsys.roo.xtext.example.somedsl</Embed-Dependency>
}}}
  * Provide an implementation of de.saxsys.roo.xtext.XtextLanguage and register it as OSGi service with @Component and @Service annotations. You can use SomeDslXtextLanguage as example. You just have to change the suffix according to your needs and return the Runtime Module of your DSL instead of SomeDslRuntimeModule.

  * if not yet done, you should install xtext4roo-wrapper in your Roo Shell now
  * now you can install and activate the DSL by typing the following commands in your Roo Shell:
{{{
osgi install --url file:///{absolute path of your DSL-Roo-Interation bundle jar}
osgi framework command start {bundle id of your DSL-Roo-Interation bundle}
}}}
  * verify the new bundle is active by typing
{{{
osgi ps
}}}
From now on, de.saxsys.roo.xtext.XtextMetadata is provided for each file that has the suffix of your DSL and that is placed into some source directory of your Roo project.

Now you can write some Metadata Listener for your DSL as shown in SomeDslExampleMetadataListener. While in the example, only some logging is done, you likely want to to some code generation. Consult Spring Roo addon development documentation for more details on this. Also, you probably want to put your MetadataListener in some other addon than the DSL. 